from django import forms 
from .models import Sucursal,Auto,Tarjeta,Reserva,ExtendUser
#validar telefono 
import re
#validar edad
from django.utils import timezone, dateformat
#crear id usuario
import uuid
#para enviar mail al regisrar
from django.conf import settings
from django.core.mail import EmailMessage
from django.core.exceptions import ValidationError
from django.contrib.auth.models import User

#puedes hcaer  creando el def save y si cumple lo basico se genera el id, y los demas datos como la edad 
###########################################################################
###########################################################################
#Registro usuarios
class RegisterForm(forms.ModelForm):
    class Meta:
        model=User
        fields=['username', 'first_name', 'last_name', 'email', 'Telefono','date_birth','password']
        exclude=['is_superuser','date_joined','is_staff','is_active','groups', 'user_permissions','last_login']

    first_name = forms.CharField(label='Nombres',required=True, min_length=4, max_length=60,
                               widget=forms.TextInput(attrs={
                                   'class': 'form-control',
                                   'placeholder': 'Nombre'
                               }))
    last_name = forms.CharField(label='Apellidos',required=True, min_length=4, max_length=60,
                               widget=forms.TextInput(attrs={
                                   'class': 'form-control',
                                   'placeholder': 'Apellidos'
                               }))
    username = forms.CharField(label='Usuario',required=True, min_length=4, max_length=60,
                               widget=forms.TextInput(attrs={
                                   'class': 'form-control',
                                   'placeholder': 'Nombre de Usuario'
                               }))
    email = forms.CharField(label='Correo Electrónico',required=True,
                             widget=forms.EmailInput(attrs={
                                   'class': 'form-control',
                                   'placeholder': 'ejemplo@empresa.cl'
                               }))
    Telefono=forms.CharField(label='Celular',max_length=12,
                             widget=forms.TextInput(attrs={
                                   'class': 'form-control',
                                   'placeholder': 'Nombre de Usuario'
                               }))
    
    password = forms.CharField(label='Contraseña',required=True,
                              widget=forms.PasswordInput(attrs={
                                  'class': 'form-control',
                                  'placeholder': 'Contraseña'
                              }))
    password2 = forms.CharField(label='Repetir Constraseña',required=True,
                               widget=forms.PasswordInput(attrs={
                                  'class': 'form-control',
                                  'placeholder': 'Repetir Contraseña'
                              }))
    
    date_birth=forms.DateField(widget=forms.DateInput(attrs={'type':'date'}),label='Fecha Nacimiento')

    def clean_date_birth(self):
        cleaned_data = super().clean()
        birth_date = cleaned_data.get('date_birth')
        today = timezone.now().date()
        age = today.year - birth_date.year - ((today.month, today.day) < (birth_date.month, birth_date.day))
        if age < 18:
            raise forms.ValidationError("Debe ser mayor de edad para registrarse")
        return birth_date
    #agrega los forms  y luego los def para los demas campos

    def clean_username(self):
        username=self.cleaned_data.get('username')
        if User.objects.filter(username=username).exists():
            raise forms.ValidationError('El usuario ya se encuentra en uso')
        return username
        
    def clean_email(self):
        email=self.cleaned_data.get('email')
        if User.objects.filter(email=email).exists():
            raise forms.ValidationError('El email ya se encuentra en uso')
        return email
    
    def clean(self):
        cleaned_data=super().clean()
        if cleaned_data.get('password2')!= cleaned_data.get('password'):
            self.add_error('password2', 'La contraseña no coincide')

    def guardarUsuario(self):
        return User.objects.create_user(
            self.cleaned_data.get('username'),
            self.cleaned_data.get('email'),
            self.cleaned_data.get('password'),
            first_name=self.cleaned_data.get('first_name'),
            last_name=self.cleaned_data.get('last_name')
        )

    
###########################################################################
###########################################################################
#Registro extend
class RegiserExtendUser(forms.ModelForm):
    class Meta:
        model=ExtendUser
        exclude=['idextenuser','Telefono','accesibility','accesibility','imageprofile','Fecha_Nacimiento','iduser']

    def __init__(self, user, *args, **kwargs):
        super(RegiserExtendUser, self).__init__(*args, **kwargs)
        self.user = user

    def clean_Telefono(self):
        telefono = self.cleaned_data.get('Telefono')
        if not re.match(r'^\+?\d+$', telefono):
            raise forms.ValidationError("El Teléfono solo puede contener números y opcionalmente el símbolo '+' al inicio")
        return telefono
    
    def save(self,commit=True):
        registroextenduser=super().save(commit=commit)
        if not registroextenduser.idextenuser:
            extend_id=str(uuid.uuid4())[:6]
            registroextenduser.idextenuser=extend_id
            registroextenduser.iduser=self.user

        if commit:
            registroextenduser.save()
            
        return registroextenduser


###########################################################################
###########################################################################
#Registro tarjeta
class RegisterTarjetasforms(forms.ModelForm):
    class Meta:
        model=Tarjeta
        #fields='__all__'
        fields=['Nombre','NumeroTarjeta','FechaVencimiento','CVV']
        widgets={'IdTarjeta':forms.HiddenInput(), 
                 'iduser':forms.HiddenInput()}
    
    Nombre=forms.CharField(label='Nombre',required=True, min_length=12, max_length=60,
                               widget=forms.TextInput(attrs={
                                   'class': 'form-control',
                                   'placeholder': 'Nombre'
                               }))

    NumeroTarjeta=forms.CharField(label='N° Tarjeta',required=True, min_length=12, max_length=20,
                               widget=forms.TextInput(attrs={
                                   'class': 'form-control',
                                   'placeholder': 'ingreser N° Tarjeta'
                               }))

    FechaVencimiento=forms.CharField(label='Fecha Vencimiento',required=True, min_length=5, max_length=5,
                               widget=forms.TextInput(attrs={
                                   'class': 'form-control',
                                   'placeholder': ' Ingrese Fecha 00/00'
                               }))
    
    CVV=forms.CharField(label='CVV',required=True, min_length=3, max_length=60,
                               widget=forms.TextInput(attrs={
                                   'class': 'form-control',
                                   'placeholder': 'Codigo seguridad'
                               }))
     
    def __init__(self, user, *args, **kwargs):
        super(RegisterTarjetasforms, self).__init__(*args, **kwargs)
        self.user = user

    def clean_nombre_tarjeta(self):
        cleaned_data=super().clean()
        nomtarjeta=cleaned_data.get('Nombre')
        return nomtarjeta
    def clean_num_tarjeta(self):
        cleaned_data=super().clean()
        numtarjeta=cleaned_data.get('NumeroTarjeta')
        return numtarjeta
    def clean_cvv_tarjeta(self):
        cleaned_data=super().clean()
        cvv=cleaned_data.get('CVV')
        return cvv
    def clean_fvt_tarjeta(self):
        cleaned_data=super().clean()
        FVto=cleaned_data.get('FechaVencimiento')
        return FVto

        #registrotarjeta=super(RegisterForm, self).save(commit=False)
    def save(self, commit=True):
        registrotarjeta=super().save(commit=commit)
        if not registrotarjeta.IdTarjeta:
            card_id=str(uuid.uuid4())[:6]
            registrotarjeta.IdTarjeta=card_id
            registrotarjeta.iduser=self.user

        if commit:
            registrotarjeta.save()
        return registrotarjeta
            
###########################################################################
###########################################################################
#Registro vehiculos
class RegisterVehiculosforms(forms.ModelForm):
    class Meta:
        model=Auto
        #fields='__all__'
        fields=['Marca','Modelo','Patente','Vin']
        widgets={'IdAuto':forms.HiddenInput(),
                'IdUser':forms.HiddenInput()}


    Marca=forms.CharField(label='Marca',required=True, min_length=3, max_length=20,
                               widget=forms.TextInput(attrs={
                                   'class': 'form-control',
                                   'placeholder': 'Ingrese la Marca'
                               }))
    Modelo=forms.CharField(label='Modelo',required=True, min_length=2, max_length=40,
                               widget=forms.TextInput(attrs={
                                   'class': 'form-control',
                                   'placeholder': 'Ingresa el Modelo'
                               }))
    Patente=forms.CharField(label='Patente',required=True, min_length=6, max_length=7,
                               widget=forms.TextInput(attrs={
                                   'class': 'form-control',
                                   'placeholder': 'Ingresa patente XXXX00'
                               }))
    Vin=forms.CharField(label='Vin',required=True, min_length=4, max_length=60,
                               widget=forms.TextInput(attrs={
                                   'class': 'form-control',
                                   'placeholder': 'Ingresa Vin xxxxxx'
                               }))

    
    def __init__(self, user, *args, **kwargs):
        super(RegisterVehiculosforms, self).__init__(*args, **kwargs)
        self.user = user


    def save(self, commit=True):
        registroauto = super().save(commit=False)
        if not registroauto.IdAuto:
            auto_id=str(uuid.uuid4())[:6]
            registroauto.IdAuto=auto_id
            registroauto.IdUser = self.user
        if commit:
            registroauto.save()

        return registroauto
 
###########################################################################
###########################################################################


###########################################################################
###########################################################################
#autos forms













#Sucursales 
#class sucursalform(forms.ModelForm):
#    class Meta:
#        model=Sucursal
#      fields='__all__'
#class tarjetasform(forms.ModelForm):
#    class Meta:
#        model=Tarjeta
#        fields='__all__'
#class autosform(forms.ModelForm):
#    class Meta:
#        model=Auto
#        fields='__all__'#
#class RegisterAutosform(forms.ModelForm):
#    class Meta:
#        model=Auto
#        fields='__all__'
#
#
#
#    def save(self, commit=True):
#        user = super(RegisterForm, self).save(commit=False)
#        if commit: 
#            user.save()
#        extend_user=ExtendUser(
#            Telefono=self.cleaned_data['Telefono'],
#            Fecha_Nacimiento=self.cleaned_data['date_birth'],
#            imageprofile=self.cleaned_data.get('imageprofile'),
#            accesibility=self.cleaned_data.get('accesibility'),
#            iduser=user 
#            )
#        if commit:
#            extend_user.save()
#
#        return user

# def save(self, commit=True):
#     #user=User.objects.get(user.id)
#     #user = User.objects.get(request.user.id) 
#     #registroauto=super().save(commit=commit)
#     registroauto = super().save(commit=False)
#     if not registroauto.IdAuto:
#         auto_id=str(uuid.uuid4())[:6]
#         registroauto.IdAuto=auto_id
#         registroauto.IdUser = self.user
#     if commit:
#         registroauto.save()
#     return registroauto

#    def guardarUsuario_con_extension(self):
#        user = self.guardarUsuario()  
#
#        extend_user = ExtendUser(
#            Telefono=self.cleaned_data['Telefono'],
#            Fecha_Nacimiento=self.cleaned_data['date_birth'],
#            imageprofile=self.cleaned_data.get('imageprofile'),
#            accesibility=self.cleaned_data.get('accesibility'),
##            iduser=user )
 ##       extend_user.save()
#
#        return user

















#        exclude=['username','IdUser','date_joined', 'last_login','correo','contrasena','is_superuser','is_staff', 'is_active','groups', 'user_permissions']#
#        widgets={
#            #oculta el input del iduser
#            'IdUser':forms.HiddenInput(),
#           # 'password':forms.HiddenInput(),
#            
#         }
#    Rut=forms.CharField(label='Rut', required=True, min_length=6, max_length=12, widget=forms.TextInput(attrs={
#                                   'class': 'form-control',
#                                   'placeholder': 'RUT'}))
#    
#    first_name=forms.CharField(label='Nombre', required=True, min_length=1,max_length=12, widget=forms.TextInput(attrs={
#                                   'class': 'form-control',
#                                   'placeholder': 'Nombre'}))
#    last_name=forms.CharField(label='Apellido', required=True, min_length=1, max_length=25, widget=forms.TextInput(attrs={
#                                   'class': 'form-control',
#                                   'placeholder': 'Apellido'}))
#    Telefono=forms.CharField(label='Telefono', required=True, min_length=9, max_length=12, widget=forms.TextInput(attrs={
#                                   'class': 'form-control',
#                                   'placeholder': 'Telefono'}))
#    email = forms.CharField(label='Correo Electrónico',required=True,
#                             widget=forms.EmailInput(attrs={
#                                   'class': 'form-control',
#                                   'placeholder': 'ejemplo@empresa.cl'
#                               }))
#    
#    Fecha_Nacimiento=forms.DateField(widget=forms.DateInput(attrs={'type':'date'}),label='Fecha Nacimiento')
#
#    
#    def clean_Telefono(self):
#        telefono = self.cleaned_data.get('Telefono')
#        if not re.match(r'^\+?\d+$', telefono):
#            raise forms.ValidationError("El Teléfono solo puede contener números y opcionalmente el símbolo '+' al inicio")
#        return telefono
#    
#
#    def clean_Fecha_Nacimiento(self):
#        cleaned_data = super().clean()
#        birth_date = cleaned_data.get('Fecha_Nacimiento')
#        today = timezone.now().date()
#        age = today.year - birth_date.year - ((today.month, today.day) < (birth_date.month, birth_date.day))
#        if age < 18:
#            raise forms.ValidationError("Debe ser mayor de edad para registrarse")
#        return birth_date
#
#    #def clean(self):
#    #    cleaned_data=super().clean()
#    #    if cleaned_data.get('Password2')!= cleaned_data.get('password'):
#    #        self.add_error('Password2', 'La contraseña no coincide')
#
#    def save(self, commit=True):
#        registro = super(RegisterForm, self).save(commit=False)
#        if not registro.IdUser: 
#            User_id=str(uuid.uuid4())[:8]
#            registro.IdUser = User_id
#            registro.correo = registro.correo
#            datejoined=dateformat.format(timezone.localtime(timezone.now()), 'Y-m-d H:i:s')
#            registro.date_joined=datejoined
#        if commit:
#            registro.save()
#      
#        if commit:
#            registro.save()
#            subject = 'Registro exitosaO'
#            message = f"¡Hola {registro.correo}!\nTu registro en SmartParking con Rut {registro.Rut} ha sido exitoso."
#            from_email =settings.EMAIL_HOST_USER 
#            to_email = registro.correo
#
#            mail = EmailMessage(subject, message, from_email, [to_email])
#            mail.send()
 #       return registro

 #class Tarjeta(models.Model):
#    IdTarjeta=models.CharField(max_length=20)
#    NumeroTarjeta=models.CharField(max_length=20)
#    Nombre=models.CharField(max_length=50, default='0')
#    FechaVencimiento=models.CharField(max_length=5)
#    CVV=models.CharField(max_length=3)
#    iduser=models.ForeignKey(User,null=True,blank=False, on_delete=models.RESTRICT)

