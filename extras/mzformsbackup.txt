from django import forms 
from .models import Sucursal,Usuario,Auto,Tarjeta,Reserva
#validar telefono 
import re
#validar edad
from django.utils import timezone, dateformat
#crear id usuario
import uuid
#para enviar mail al regisrar
from django.conf import settings
from django.core.mail import EmailMessage
from django.core.exceptions import ValidationError


class RegisterForm(forms.ModelForm):
    class Meta:
        model=Usuario
        #fields='__all__'
        exclude=['username','IdUser','date_joined', 'is_superuser','is_staff', 'is_active','last_login','groups', 'user_permissions','password','correo']
        widgets={
            #oculta el input del iduser
            'IdUser':forms.HiddenInput()
         }
    Rut=forms.CharField(label='Rut', required=True, min_length=6, max_length=12, widget=forms.TextInput(attrs={
                                   'class': 'form-control',
                                   'placeholder': 'RUT'}))
    
    first_name=forms.CharField(label='Nombre', required=True, min_length=1,max_length=12, widget=forms.TextInput(attrs={
                                   'class': 'form-control',
                                   'placeholder': 'Nombre'}))
    last_name=forms.CharField(label='Apellido', required=True, min_length=1, max_length=25, widget=forms.TextInput(attrs={
                                   'class': 'form-control',
                                   'placeholder': 'Apellido'}))
    Telefono=forms.CharField(label='Telefono', required=True, min_length=9, max_length=12, widget=forms.TextInput(attrs={
                                   'class': 'form-control',
                                   'placeholder': 'Telefono'}))
    email = forms.CharField(label='Correo Electrónico',required=True,
                             widget=forms.EmailInput(attrs={
                                   'class': 'form-control',
                                   'placeholder': 'ejemplo@empresa.cl'
                               }))
    
    
    #correo=forms.EmailField(label='Email', required=True, widget=forms.EmailInput(attrs={'class': 'form-control','placeholder':'Email'}))
    #correo = forms.EmailField(label='Email', required=True, widget=forms.EmailInput(attrs={'class': 'form-control', 'placeholder': 'Email'}))

    
    Fecha_Nacimiento=forms.DateField(widget=forms.DateInput(attrs={'type':'date'}),label='Fecha Nacimiento')

    Password = forms.CharField(label='Contraseña',required=True,
                               widget=forms.PasswordInput(attrs={
                                   'class': 'form-control',
                                   'placeholder': 'Contraseña'
                               }))
    Password2 = forms.CharField(label='Contraseña',required=True,
                               widget=forms.PasswordInput(attrs={
                                   'class': 'form-control',
                                   'placeholder': 'Repetir Contraseña'
                               }))
    
    def clean_Telefono(self):
        telefono = self.cleaned_data.get('Telefono')
        if not re.match(r'^\+?\d+$', telefono):
            raise forms.ValidationError("El Teléfono solo puede contener números y opcionalmente el símbolo '+' al inicio")
        return telefono
    


    def clean_Fecha_Nacimiento(self):
        cleaned_data = super().clean()
        birth_date = cleaned_data.get('Fecha_Nacimiento')
        today = timezone.now().date()
        age = today.year - birth_date.year - ((today.month, today.day) < (birth_date.month, birth_date.day))
        if age < 18:
            raise forms.ValidationError("Debe ser mayor de edad para registrarse")
        return birth_date

    def clean(self):
        cleaned_data=super().clean()
        if cleaned_data.get('Password2')!= cleaned_data.get('Password'):
            self.add_error('Password2', 'La contraseña no coincide')

    def save(self, commit=True):
        registro = super(RegisterForm, self).save(commit=False)
        if not registro.IdUser: 
            User_id=str(uuid.uuid4())[:8]
            registro.IdUser = User_id  
            datejoined=dateformat.format(timezone.localtime(timezone.now()), 'Y-m-d H:i:s')
            registro.date_joined=datejoined
        if commit:
            registro.save()
      
        if commit:
            registro.save()
            subject = 'Registro exitosaO'
            message = f"¡Hola {registro.email}!\nTu registro en SmartParking con Rut {registro.username} ha sido exitoso."
            from_email =settings.EMAIL_HOST_USER 
            to_email = registro.email

            mail = EmailMessage(subject, message, from_email, [to_email])
            mail.send()
        return registro


    
class sucursalform(forms.ModelForm):
    class Meta:
        model=Sucursal
        fields='__all__'

class tarjetasform(forms.ModelForm):
    class Meta:
        model=Tarjeta
        fields='__all__'

class autosform(forms.ModelForm):
    class Meta:
        model=Auto
        fields='__all__'

 #def clean_email(self):
    #    email=self.cleaned_data.get('Email')
    #    emailrep=User.objects.filter(Email=email)
    #    if emailrep.exists():
    #        raise forms.ValidationError('El email ya se encuentra en uso')
    #    uppermail=email.upper()
    #    return uppermail

#agregar que no se repita el RUT
#cambiar el error sale en ingles   Ensure this value has at most 10 characters (it has 11).
#   def clean_nameuser(self):
#       cleaned_data = super().clean()
#       nombre=cleaned_data.get('Nombre')
#       if len(nombre)<=3:
#           raise forms.ValidationError("El nombre es demasiado corto, debe tener mas de dos letras")
#       return nombre
#   
#
#   def clean_apelluser(self):
#       apellido=self.cleaned_data.get('Apellido')
#       if len(apellido)<=2:
#           raise forms.ValidationError("El Apellido es demasiado corto, debe tener mas de dos letras")
#       return apellido
#   
#   def clean_rut(self):
#       rut=self.cleaned_data.get('Rut')
#       if len(rut)>11:
#           raise forms.ValidationError("Ingrese un rut valido sin puntos y con guion")
#       return rut   
 #def clean_rut(self):
        #cleaned_data = super().clean()
        #rut=cleaned_data.get('Rut')
        #if len(rut)<11:
        #   raise forms.ValidationError("Ingrese un rut valido sin puntos y con guion")
        #return rut   